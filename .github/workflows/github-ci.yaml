name: Build and Deploy

on:
  push:
    branches:
      - main
      - develop
      
env:
  S3_BUCKET_NAME: "haruhana-backend-jar"

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      jar_name: ${{ steps.jar.outputs.jar_name }}

    steps:
      # 1. Git Checkout
      - name: Checkout
        uses: actions/checkout@v2

      # 2. Set up Java 21
      - name: Set up JDK 21
        uses: actions/setup-java@v2
        with:
          java-version: '21'
          distribution: 'temurin'

      # 3. Gradlew 실행 권한 부여
      - name: Grant Execute Permission
        run: chmod +x ./gradlew

      # 4. JWT_SECRET_KEY를 포함한 .env 파일 생성
      - name: Generate .env file
        run: |
          echo "JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}" >> .env
          echo "KAKAO_CLIENT_ID=${{ secrets.KAKAO_CLIENT_ID }}" >> .env
          echo "KAKAO_CLIENT_SECRET=${{ secrets.KAKAO_CLIENT_SECRET }}" >> .env
          echo "MONGO_PRD_URL=${{ secrets.MONGO_PRD_URL }}" >> .env
          echo "SERVER_OAUTH_REDIRECT_URI_PRD=${{ secrets.SERVER_OAUTH_REDIRECT_URI_PRD }}" >> .env
          echo "CLIENT_OAUTH_REDIRECT_URI_PRD=${{ secrets.CLIENT_OAUTH_REDIRECT_URI_PRD }}" >> .env

      # 5. Gradle 빌드 (.env 반영하여 환경변수로 실행)
      - name: Build with Gradle
        run: |
          export $(cat .env | xargs)  # 환경변수 주입
          ./gradlew clean bootJar -x test

      # 6. 빌드된 jar에 타임스탬프 붙이기
      - name: Copy Jar with Timestamp
        id: jar
        run: |
          TIMESTAMP=$(date +"%Y%m%d-%H%M%S")
          JAR_FILE=$(ls ./build/libs/*.jar | head -n 1)
          TARGET_NAME="app-$TIMESTAMP.jar"
          cp "$JAR_FILE" "$TARGET_NAME"
          echo "jar_name=$TARGET_NAME" >> $GITHUB_OUTPUT

      - name: Upload built JAR as artifact
        uses: actions/upload-artifact@v4
        with:
          name: built-jar
          path: ${{ steps.jar.outputs.jar_name }}

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      # 7. AWS 인증 설정
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_ID }}
          aws-region: ap-northeast-2

      - name: Download artifact name
        run: echo "JAR_NAME=${{ needs.build.outputs.jar_name }}" >> $GITHUB_ENV
        
      # 8. S3에 업로드
      - name: Upload to S3
        run: |
          JAR_FILE=$(ls *.jar | head -n 1)
          echo "Uploading $JAR_FILE"
          aws s3 cp "$JAR_FILE" s3://$S3_BUCKET_NAME/

      # 9. EC2 SSH PEM키 Decode
      - name: Decode SSH key
        run: |
          echo "${{ secrets.EC2_KEY }}" | base64 -d > haru-hana-key.pem
          chmod 600 haru-hana-key.pem

      # 10. Deploy to EC2
      - name: Deploy to EC2 via SSH
        run: |
          ssh -o StrictHostKeyChecking=no -i haru-hana-key.pem ubuntu@${{ secrets.EC2_HOST }} << EOF
            # 기존 springboot 프로세스 종료
            pkill -f 'java -jar' || echo "No process running"
            
            # S3에서 최신 jar 다운로드
            aws s3 cp s3://$S3_BUCKET_NAME/      - name: Download artifact name
            
            # 새 jar 실행
            nohup java -Dspring.profiles.active=prd -jar ~/springboot-app.jar > app.log 2>&1 &
          EOF
